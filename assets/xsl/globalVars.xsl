<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0" xpath-default-namespace="urn:isbn:1-931666-22-9">
    
   <!--contains templates for creating names and href for anchors-->
    <xsl:template name="createAHref">
        <xsl:param name="node"/>
       
        <xsl:choose>
            <!--use id defined in ead as anchor name-->
            <xsl:when test="$node/@id">
                <xsl:value-of select="$node/@id"/>
            </xsl:when>
            <!--if id doesn't exist-->
            <xsl:when test="not($node/@id)">
                <!--instead of defining arbitrary strings, generating a name based on nodename and id generated by node-->
                <xsl:value-of select="concat(name($node),generate-id($node))"/>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    
    <!--generates table cells based on the number of cells, headings, and widths that are passed in. Used in global vars used in dsc template-->
    <xsl:template name="createTable">
        <!--number of cells. Using default values for vars used in the dsc templates-->
        <xsl:param name="cellNumber" select="4"/>
        <!--default widths of cells. In cell order-->
        <xsl:param name="cellWidths" select="'10%,10%,40%,40%'"/>
        <!--headings for cells-->
        <xsl:param name="headings"/>
        <!--counter-->
        <xsl:param name="counter" select="1"/>
        
        <!--appending delim to  the end of comma delimited string-->
        <xsl:variable name="cellHeader">
            <xsl:choose>
                <!--if this is the first pass, append delim-->
                <xsl:when test="substring($headings,string-length($headings),1) != ','">
                    <xsl:value-of select="concat($headings,',')"/>
                </xsl:when>
                <!--if not, just pass the string-->
                <xsl:otherwise>
                    <xsl:value-of select="$headings"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        
        <!--same as cell header-->
        <xsl:variable name="cellWidthList">
            <xsl:choose>
                <xsl:when test="substring($cellWidths,string-length(cellWidths),1) != ','">
                    <xsl:value-of select="concat($cellWidths,',')"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="cellWidths"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
     
        <xsl:choose>
            <!--if haven't finished writing out tds-->
            <xsl:when test="$counter &lt;= $cellNumber">
                <!--grabbing value before delim-->
                <xsl:variable name="width" select="substring-before($cellWidthList,',')"/>
                <xsl:variable name="header" select="substring-before($cellHeader,',')"/>
                <!--generating td. Class heading in css file defines font-weight as bold-->
               <td class="heading" width="{$width}">
                    <xsl:value-of select="$header"/>
               </td>
                <!--calling template-->
                <xsl:call-template name="createTable">
                    <xsl:with-param name="cellNumber" select="$cellNumber"/>
                    <xsl:with-param name="cellWidths" select="substring-after($cellWidthList,concat($width,','))"/>
                    <xsl:with-param name="headings" select="substring-after($cellHeader,concat($header,','))"/>
                    <xsl:with-param name="counter" select="$counter+1"/>
                </xsl:call-template>
            </xsl:when>
        </xsl:choose>
       
        
    </xsl:template>
   
    <!--global var for solr query. Currently used for access points-->
    <xsl:variable name="solrQueryURL">
        <xsl:text>/select?q=all&amp;wt=xslt&amp;tr=search-return.xsl&amp;</xsl:text>
    </xsl:variable>
 
    <!--global vars for a names and hrefs for each section of the ead. These are referenced in the toc and in individual templates in ead2 html.xsl and dscTemlplate.xsl-->
    <xsl:variable name="indexLink">
        <!--calling template that's defined above-->
        <xsl:call-template name="createAHref">
            <xsl:with-param name="node" select="ead/archdesc/index"/>
        </xsl:call-template>
    </xsl:variable>
    
    <xsl:variable name="containerLink">
        <xsl:call-template name="createAHref">
            <xsl:with-param name="node" select="ead/archdesc/dsc"/>
        </xsl:call-template>
    </xsl:variable>
    
    <xsl:variable name="bibLink">
        <xsl:call-template name="createAHref">
            <xsl:with-param name="node" select="ead/archdesc/bibliography"/>
        </xsl:call-template>
    </xsl:variable>
    
    <xsl:variable name="oddLink">
        <xsl:call-template name="createAHref">
            <xsl:with-param name="node" select="ead/archdesc/odd"/>
        </xsl:call-template>
    </xsl:variable>
    
    <xsl:variable name="otherfindaidLink">
        <xsl:call-template name="createAHref">
            <xsl:with-param name="node" select="ead/archdesc/otherfindaid"/>
        </xsl:call-template>
    </xsl:variable>
    
    
    <xsl:variable name="separatedLink">
        <xsl:call-template name="createAHref">
            <xsl:with-param name="node" select="ead/archdesc/separatedmaterial"/>
        </xsl:call-template>
    </xsl:variable>
    
    <xsl:variable name="relatedLink">
        <xsl:call-template name="createAHref">
            <xsl:with-param name="node" select="ead/archdesc/relatedmaterial"/>
        </xsl:call-template>
    </xsl:variable>
    
    <xsl:variable name="arrangementLink">
        <xsl:call-template name="createAHref">
            <xsl:with-param name="node" select="ead/archdesc/arrangement"/>
        </xsl:call-template>
    </xsl:variable>
    
    <xsl:variable name="accessPointLink">
        <xsl:call-template name="createAHref">
            <xsl:with-param name="node" select="ead/archdesc/controlaccess"/>
        </xsl:call-template>
    </xsl:variable>
    
    <xsl:variable name="scopeLink">
        <xsl:call-template name="createAHref">
            <xsl:with-param name="node" select="ead/archdesc/scopecontent"/>
        </xsl:call-template>
    </xsl:variable>
    
    <xsl:variable name="bioghistLink">
        <xsl:call-template name="createAHref">
            <xsl:with-param name="node" select="ead/archdesc/bioghist"/>
        </xsl:call-template>
    </xsl:variable>
    
    <xsl:variable name="didLink">
        <xsl:call-template name="createAHref">
            <xsl:with-param name="node" select="ead/archdesc/did"/>
        </xsl:call-template>
    </xsl:variable>
    
    <!-- headers for the various configurations of box/folder/volume/reel/item in our collection. add your own ad libidinem, then adjust dsc below. These are referenced in dscTemplate.xsl -->
    
    <xsl:variable name="box-and-folder-heading">
        <tr>
	<xsl:comment>Table type: box-and-folder-heading</xsl:comment>
        <xsl:call-template name="createTable">
            <xsl:with-param name="headings" select="'Box,Folder,Title,Date'"/>
        </xsl:call-template>
        </tr>
    </xsl:variable>
   <xsl:variable name="item-heading">
    <tr>
		<xsl:comment>Table type: item-heading</xsl:comment>
    <xsl:call-template name="createTable">
            <xsl:with-param name="headings" select="'Item,,Title,Date'"/>
            <xsl:with-param name="cellWidths" select="'10%,10%,65%,15%'"/>
        </xsl:call-template>
    </tr>
</xsl:variable>
 
    <xsl:variable name="box-and-volume-heading">
        <tr>
					<xsl:comment>Table type: box-and-volume-heading</xsl:comment>
            <xsl:call-template name="createTable">
                <xsl:with-param name="headings" select="'Box,Volume,Title,Date'"/>
            </xsl:call-template>
        </tr>
    </xsl:variable>
    
    <xsl:variable name="box-and-item-heading">
        <tr>
	<xsl:comment>Table type: box-and-item-heading</xsl:comment>
            <xsl:call-template name="createTable">
                <xsl:with-param name="headings" select="'Box,Item,Title,Date'"/>
                
            </xsl:call-template>
        </tr>
    </xsl:variable>
    
    <xsl:variable name="box-and-number-heading">
        <tr>
	<xsl:comment>Table type: box-and-number-heading</xsl:comment>
            <xsl:call-template name="createTable">
                <xsl:with-param name="headings" select="'Box,Number,Title,Date'"/>
                
            </xsl:call-template>
        </tr>
    </xsl:variable>
    
    <xsl:variable name="volume-and-item-heading">
        <tr>
	<xsl:comment>Table type: volume-and-item-heading</xsl:comment>
            <xsl:call-template name="createTable">
                <xsl:with-param name="headings" select="'Volume,&#160;,Item,Date'"/>
                
            </xsl:call-template>
        </tr>
    </xsl:variable>
    
    <xsl:variable name="map-case-and-drawer-heading">
        <tr>
	<xsl:comment>Table type: map-case-and-drawer-heading</xsl:comment>
            <xsl:call-template name="createTable">
                <xsl:with-param name="headings" select="'Map-case,Drawer,Title,Date'"/>
                
            </xsl:call-template>
        </tr>
    </xsl:variable>
    
    <xsl:variable name="map-case-heading">
        <tr>
		<xsl:comment>Table type: map-case-heading</xsl:comment>
            <xsl:call-template name="createTable">
                <xsl:with-param name="headings" select="'Map-case,&#160;,Title,Date'"/>
                
            </xsl:call-template>
        </tr>
    </xsl:variable>
    
    <xsl:variable name="box-heading">
        <tr>
	<xsl:comment>Table type: box-heading</xsl:comment>
            <xsl:call-template name="createTable">
                <xsl:with-param name="headings" select="'Box,&#x00A0;,Title,Date'"/>
                
            </xsl:call-template>
        </tr>
    </xsl:variable>
    
    <xsl:variable name="volume-heading">
        <tr>
	<xsl:comment>Table type: volume-heading</xsl:comment>
            <xsl:call-template name="createTable">
                <xsl:with-param name="headings" select="'Volume,&#160;,Title,Date'"/>
                
            </xsl:call-template>
        </tr>
    </xsl:variable>
    
    <xsl:variable name="album-heading">
        <tr>
	<xsl:comment>Table type: album-heading</xsl:comment>
            <xsl:call-template name="createTable">
                <xsl:with-param name="headings" select="'Album,&#160;,Title,Date'"/>
                
            </xsl:call-template>
        </tr>
    </xsl:variable>
    
    <xsl:variable name="reel-heading">
        <tr>
	<xsl:comment>Table type: reel-heading</xsl:comment>
            <xsl:call-template name="createTable">
                <xsl:with-param name="headings" select="'Reel,&#160;,Title,Date'"/>
                
            </xsl:call-template>
        </tr>
    </xsl:variable>
    
    <xsl:variable name="folder-heading">
        <tr>
	<xsl:comment>Table type: folder-heading</xsl:comment>
            <xsl:call-template name="createTable">
                <xsl:with-param name="headings" select="'Folder,&#x00A0;,Title,Date'"/>
                
            </xsl:call-template>
            
        </tr>
    </xsl:variable>
    
    
</xsl:stylesheet>
